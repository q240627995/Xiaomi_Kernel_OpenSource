	git init
git clone https://github.com/q240627995/android_kernel_samsung_msm8974
git branch -a 
	查看远程分支(所有分支) git branch -a 
	查看本地分支 git branch

#当我想从远程仓库里拉取一条本地不存在的分支时：
git checkout -b 本地分支名 origin/远程分支名
git checkout -b lineage-17.1_pro origin/lineage-17.1_pro
	git checkout -b 切换远程分支
	git checkout 切换本地分支
修改
git status
git commit -a
git push

	q240627995
	ylx21314

git status


##################################
把这个仓库添加为远程分支
git remote add new https://github.com/vikrant82/android_kernel_samsung_mondrianwifi
git fetch new

git cherry-pick xxxxxx

多个commit 只需要git cherry-pick
commitid1…commitid100
注意，不包含第一个 commitid ， 即 git cherry-pick (commitid1…commitid100]
如果想搞成[]区间，使用 git cherry-pick A^…B 相当于[A B]包含A


git status
git commit -a


用 git status 查看是哪些文件发生冲突（红色的为有冲突的文件）
可用git diff看看修改差别情况
解决完冲突之后，git add 这些文件（git add相当于标记为已解决）
https://blog.csdn.net/sinat_40701859/article/details/99410060

批量git，遇到冲突, 手动解决后, git cherry-pick --continue就可以继续了

	git cherry-pick --abort
	放弃pick



#################################
git如何撤销上一次commit操作
	one:not push
git reset --soft|--mixed|--hard <commit_id>
git push develop develop --force  (本地分支和远程分支都是 develop)

	tow:pushed
git revert <commit_id>
git push	(revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新。



1.第一种情况：还没有push，只是在本地commit

git reset --soft|--mixed|--hard <commit_id>
git push develop develop --force  (本地分支和远程分支都是 develop)
这里的<commit_id>就是每次commit的SHA-1，可以在log里查看到

--mixed 会保留源码,只是将git commit和index 信息回退到了某个版本.
--soft 保留源码,只回退到commit信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.
--hard 源码也会回退到某个版本,commit和index 都会回退到某个版本.(注意,这种方式是改变本地代码仓库源码)

当然有人在push代码以后,也使用 reset --hard <commit...> 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现全是冲突.....这时换下一种

2.commit push 代码已经更新到远程仓库

对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令

git revert <commit_id>
revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新。

注意：git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit，看似达到的效果是一样的,其实完全不同。

第一:上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.
第二:如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.
第三:reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.



#########################
git log -p --all -G 'Disable CRC'

搜索commit内容
git log --grep='Disable CRC'
	WorkQueues

搜索文件
git log  --pretty=oneline xxx/xxx/filename

命令行输出了修改的内容，如图
git show commitId





##############################
git将多个commit合并成一个
1. 查看提交历史(最近10个)
git log -10
2. 回到前面第十个commit，且将后面九个commit提交的内容状态改为未提交
git reset commitID(第十个commit的ID)
3. 提交修改的内容
git commmit -a

 



################################
撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作（git checkout -- file）。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，那就需要版本回退了，不过前提是没有推送到远程库。



#################################
Git回滚代码到某个commit   已经推送到远程库了
回退命令：
git reset --hard HEAD^         回退到上个版本
git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前
git reset --hard commit_id     退到/进到 指定commit的sha码

强推到远程：
git push origin HEAD --force



